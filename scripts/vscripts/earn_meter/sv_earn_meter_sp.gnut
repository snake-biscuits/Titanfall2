global function Sv_EarnMeterSP_Init

void function Sv_EarnMeterSP_Init()
{
	if ( !EARNMETER_ENABLED )
		return

	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	//AddCallback_OnPlayerKilled( OnPlayerKilled )
	//AddCallback_GameStateEnter( eGameState.Playing, EarnMeter_PlayingEnter )
}


void function OnPlayerRespawned( entity player )
{
	thread EarnMeterMP_PlayerLifeThink( player )
}


void function EarnMeterMP_PlayerLifeThink( entity player )
{
	player.EndSignal( "OnDeath" )

	int lastEarnMeterMode = PlayerEarnMeter_GetMode( player )

	while ( true )
	{
		int desiredEarnMeterMode

		if ( player.IsTitan() )
		{
			entity soul = player.GetTitanSoul()
			if ( SoulTitanCore_GetExpireTime( soul ) > Time() )
				desiredEarnMeterMode = eEarnMeterMode.CORE_ACTIVE
			else
				desiredEarnMeterMode = eEarnMeterMode.CORE
		}
		else if ( IsValid( player.GetPetTitan() ) )
		{
			// desiredEarnMeterMode = eEarnMeterMode.PET
			desiredEarnMeterMode = eEarnMeterMode.DISABLED
		}
		else
		{
			desiredEarnMeterMode = eEarnMeterMode.DISABLED
		}

		if ( desiredEarnMeterMode != lastEarnMeterMode )
		{
			PlayerEarnMeter_SetMode( player, desiredEarnMeterMode )

			PlayerEarnMeter_DisableGoal( player )
			PlayerEarnMeter_DisableReward( player )

			lastEarnMeterMode = desiredEarnMeterMode
		}

		WaitFrame()
	}
}

void function SetupPlayerEarnMeter( entity player )
{
	PlayerEarnMeter_Reset( player )
}
